{"version":3,"file":"static/js/579.884d9db6.chunk.js","mappings":"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","sources":["utils/genreTable.js","utils/getGenresById.js","utils/getPosterPath.js","utils/getReleaseYear.js","utils/getPopularityFormat.js","utils/getGenresByName.js","utils/getVoteAverageFormat.js","utils/getProfilePath.js","utils/dataFiltered.js","components/ApiService/ApiService.jsx","components/ReviewCard/ReviewsCard.jsx","components/ReviewsList/ReviewsList.jsx","components/Reviews/Reviews.jsx"],"sourcesContent":["const genreTable = [\n  {\n    id: 28,\n    name: 'Action',\n  },\n  {\n    id: 12,\n    name: 'Adventure',\n  },\n  {\n    id: 16,\n    name: 'Animation',\n  },\n  {\n    id: 35,\n    name: 'Comedy',\n  },\n  {\n    id: 80,\n    name: 'Crime',\n  },\n  {\n    id: 99,\n    name: 'Documentary',\n  },\n  {\n    id: 18,\n    name: 'Drama',\n  },\n  {\n    id: 10751,\n    name: 'Family',\n  },\n  {\n    id: 14,\n    name: 'Fantasy',\n  },\n  {\n    id: 36,\n    name: 'History',\n  },\n  {\n    id: 27,\n    name: 'Horror',\n  },\n  {\n    id: 10402,\n    name: 'Music',\n  },\n  {\n    id: 9648,\n    name: 'Mystery',\n  },\n  {\n    id: 10749,\n    name: 'Romance',\n  },\n  {\n    id: 878,\n    name: 'Science Fiction',\n  },\n  {\n    id: 10770,\n    name: 'TV Movie',\n  },\n  {\n    id: 53,\n    name: 'Thriller',\n  },\n  {\n    id: 10752,\n    name: 'War',\n  },\n  {\n    id: 37,\n    name: 'Western',\n  },\n];\n\nexport default genreTable;\n","import genreTable from './genreTable';\n\nfunction getGenresById(data) {\n  return data\n    .map(element => {\n      return genreTable.find(el => el.id === element);\n    })\n    .map(el => el.name)\n    .join(', ');\n}\n\nexport default getGenresById;\n","import posterPath from '../images/poster.jpg';\nconst imagePath = 'https://image.tmdb.org/t/p/w500';\nconst defaultPath = posterPath;\n\nconst getPosterPath = urlPart => {\n  if (urlPart) {\n    return `${imagePath}${urlPart}`;\n  }\n  return defaultPath;\n};\n\nexport default getPosterPath;\n","const getReleaseYear = data => data.split('-')[0];\n\nexport default getReleaseYear;\n","const getPopularityFormat = data => Math.floor(data);\n\nexport default getPopularityFormat;\n","const getGenresByName = data => data.map(genre => genre.name).join(', ');\n\nexport default getGenresByName;\n","const getVoteAverageFormat = data => data.toFixed(1);\n\nexport default getVoteAverageFormat;\n","import profilePath from '../images/avatar.jpg';\nconst imagePath = 'https://image.tmdb.org/t/p/w500';\nconst defaultPath = profilePath;\n\nconst getProfilePath = urlPart => {\n  if (urlPart) {\n    return `${imagePath}${urlPart}`;\n  }\n  return defaultPath;\n};\n\nexport default getProfilePath;\n","import getGenresById from './getGenresById';\nimport getPosterPath from './getPosterPath';\nimport getReleaseYear from './getReleaseYear';\nimport getPopularityFormat from './getPopularityFormat';\nimport getGenresByName from './getGenresByName';\nimport getVoteAverageFormat from './getVoteAverageFormat';\nimport getProfilePath from './getProfilePath';\n\nconst dataFilter = data => {\n  const dataFiltered = data.results.map(result => {\n    return {\n      adult: result.adult,\n      genre_ids: getGenresById(result.genre_ids),\n      id: result.id,\n      poster_path: getPosterPath(result.poster_path),\n      release_date: getReleaseYear(result.release_date),\n      title: result.title.toUpperCase(),\n      vote_average: getVoteAverageFormat(result.vote_average),\n    };\n  });\n\n  const dataFilteredResponse = {\n    page: data.page,\n    results: dataFiltered,\n    total_pages: data.total_pages,\n  };\n  return dataFilteredResponse;\n};\n\nconst dataDetailsFilter = data => {\n  return {\n    budget: data.budget,\n    genres: getGenresByName(data.genres),\n    original_title: data.original_title,\n    overview: data.overview,\n    popularity: getPopularityFormat(data.popularity),\n    poster_path: getPosterPath(data.poster_path),\n    release_date: getReleaseYear(data.release_date),\n    title: data.title.toUpperCase(),\n    vote_average: getVoteAverageFormat(data.vote_average),\n    vote_count: data.vote_count,\n  };\n};\n\nconst dataCastFilter = ({ cast }) => {\n  const dataFiltered = cast.map(actor => {\n    return {\n      id: actor.id,\n      profile_path: getProfilePath(actor.profile_path),\n      name: actor.name,\n      character: actor.character,\n    };\n  });\n  return dataFiltered;\n};\n\nconst filteredAPIs = { dataFilter, dataDetailsFilter, dataCastFilter };\n\nexport default filteredAPIs;\n","import axios from 'axios';\nimport filteredAPIs from 'utils/dataFiltered';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '4efc7dd075300afeff5dc61a2436592d';\n\nconst getTrending = async ({ signal }) => {\n  const { data } = await axios.get(`trending/movie/day?api_key=${API_KEY}`, {\n    signal: signal,\n  });\n\n  if (data.results.length === 0) {\n    throw new Error();\n  }\n\n  const dataFilter = filteredAPIs.dataFilter(data);\n  return dataFilter;\n};\n\nconst getSearchMovie = async (searchName, page) => {\n  const { data } = await axios.get(\n    `search/movie?api_key=${API_KEY}&query=${searchName}&page=${page}&include_adult=false`\n  );\n\n  if (data.results.length === 0) {\n    throw new Error();\n  }\n\n  const dataFilter = filteredAPIs.dataFilter(data);\n  return dataFilter;\n};\n\nconst getMovieDetails = async ({ movieId, signal }) => {\n  const { data } = await axios.get(\n    `movie/${movieId}?api_key=${API_KEY}&language=en-US`,\n    { signal: signal }\n  );\n\n  if (data.length === 0) {\n    throw new Error();\n  }\n\n  const dataFilter = filteredAPIs.dataDetailsFilter(data);\n  return dataFilter;\n};\n\nconst getMovieCredits = async ({ movieId, signal }) => {\n  const { data } = await axios.get(\n    `movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`,\n    { signal: signal }\n  );\n\n  if (data.length === 0) {\n    throw new Error();\n  }\n\n  const dataFilter = filteredAPIs.dataCastFilter(data);\n  return dataFilter;\n};\n\nconst getMovieReviews = async ({ movieId, signal }) => {\n  const data = await axios.get(\n    `movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`,\n    { signal: signal }\n  );\n\n  if (data.length === 0) {\n    throw new Error();\n  }\n\n  return data;\n};\n\nconst APIs = {\n  getTrending,\n  getSearchMovie,\n  getMovieDetails,\n  getMovieCredits,\n  getMovieReviews,\n};\n\nexport default APIs;\n","import PropTypes from 'prop-types';\n\nconst ReviewsCard = ({ item }) => {\n  const { author, content } = item;\n\n  return (\n    <li>\n      <h3>Author: {author}</h3>\n      <p>{content}</p>\n    </li>\n  );\n};\n\nReviewsCard.propTypes = {\n  item: PropTypes.shape({\n    author: PropTypes.string.isRequired,\n    content: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nexport default ReviewsCard;\n","import PropTypes from 'prop-types';\nimport ReviewsCard from 'components/ReviewCard';\n\nconst ReviewsList = ({ reviews }) => {\n  const review = reviews.results;\n  if (!review) return;\n\n  return (\n    <>\n      {review.length > 0 ? (\n        <>\n          <ul>\n            {review &&\n              review.map(item => <ReviewsCard key={item.id} item={item} />)}\n          </ul>\n        </>\n      ) : (\n        <p>We don't have reviews for this movie </p>\n      )}\n    </>\n  );\n};\n\nReviewsList.propTypes = {\n  reviews: PropTypes.shape({\n    review: PropTypes.arrayOf(\n      PropTypes.shape({\n        id: PropTypes.number.isRequired,\n        item: PropTypes.object.isRequired,\n      }).isRequired\n    ),\n  }).isRequired,\n};\n\nexport default ReviewsList;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Toaster, toast } from 'react-hot-toast';\nimport axios from 'axios';\nimport APIs from 'components/ApiService';\nimport Loader from 'components/Loader';\nimport ReviewsList from 'components/ReviewsList';\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState({});\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    if (!movieId) return;\n    const controller = new AbortController();\n    const FetchMovieCredits = async () => {\n      setLoading(true);\n      setError(null);\n      try {\n        const { data } = await APIs.getMovieReviews({\n          movieId: movieId,\n          signal: controller.signal,\n        });\n        setReviews(data);\n      } catch (error) {\n        if (axios.isCancel(error)) return;\n        setError(error.message);\n        // setError('Щось пішло не так... Спробуйте ще раз!');\n      } finally {\n        setLoading(false);\n      }\n    };\n    FetchMovieCredits();\n    return () => {\n      controller.abort();\n    };\n  }, [movieId]);\n\n  useEffect(() => {\n    if (!error) return;\n\n    toast.error(error);\n  }, [error]);\n\n  return (\n    <>\n      <ReviewsList reviews={reviews} />\n      {loading && <Loader />}\n      <Toaster position=\"top-right\" />\n    </>\n  );\n};\n\nexport default Reviews;\n"],"names":["id","name","data","map","element","genreTable","el","join","defaultPath","posterPath","urlPart","split","Math","floor","genre","toFixed","profilePath","filteredAPIs","dataFilter","dataFiltered","results","result","adult","genre_ids","getGenresById","poster_path","getPosterPath","release_date","getReleaseYear","title","toUpperCase","vote_average","getVoteAverageFormat","page","total_pages","dataDetailsFilter","budget","genres","getGenresByName","original_title","overview","popularity","getPopularityFormat","vote_count","dataCastFilter","cast","actor","profile_path","getProfilePath","character","axios","API_KEY","getTrending","signal","length","Error","getSearchMovie","searchName","getMovieDetails","movieId","getMovieCredits","getMovieReviews","item","author","content","review","reviews","useState","setReviews","loading","setLoading","error","setError","useParams","useEffect","controller","AbortController","FetchMovieCredits","APIs","message","abort","toast","Loader","position"],"sourceRoot":""}