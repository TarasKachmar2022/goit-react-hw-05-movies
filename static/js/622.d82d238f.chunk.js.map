{"version":3,"file":"static/js/622.d82d238f.chunk.js","mappings":"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","sources":["utils/genreTable.js","utils/getGenresById.js","utils/getPosterPath.js","utils/getReleaseYear.js","utils/getPopularityFormat.js","utils/getGenresByName.js","utils/getVoteAverageFormat.js","utils/getProfilePath.js","utils/dataFiltered.js","components/ApiService/ApiService.jsx","components/CastCard/CastCard.jsx","components/CastList/CastList.jsx","components/Cast/Cast.jsx"],"sourcesContent":["const genreTable = [\n  {\n    id: 28,\n    name: 'Action',\n  },\n  {\n    id: 12,\n    name: 'Adventure',\n  },\n  {\n    id: 16,\n    name: 'Animation',\n  },\n  {\n    id: 35,\n    name: 'Comedy',\n  },\n  {\n    id: 80,\n    name: 'Crime',\n  },\n  {\n    id: 99,\n    name: 'Documentary',\n  },\n  {\n    id: 18,\n    name: 'Drama',\n  },\n  {\n    id: 10751,\n    name: 'Family',\n  },\n  {\n    id: 14,\n    name: 'Fantasy',\n  },\n  {\n    id: 36,\n    name: 'History',\n  },\n  {\n    id: 27,\n    name: 'Horror',\n  },\n  {\n    id: 10402,\n    name: 'Music',\n  },\n  {\n    id: 9648,\n    name: 'Mystery',\n  },\n  {\n    id: 10749,\n    name: 'Romance',\n  },\n  {\n    id: 878,\n    name: 'Science Fiction',\n  },\n  {\n    id: 10770,\n    name: 'TV Movie',\n  },\n  {\n    id: 53,\n    name: 'Thriller',\n  },\n  {\n    id: 10752,\n    name: 'War',\n  },\n  {\n    id: 37,\n    name: 'Western',\n  },\n];\n\nexport default genreTable;\n","import genreTable from './genreTable';\n\nfunction getGenresById(data) {\n  return data\n    .map(element => {\n      return genreTable.find(el => el.id === element);\n    })\n    .map(el => el.name)\n    .join(', ');\n}\n\nexport default getGenresById;\n","import posterPath from '../images/poster.jpg';\nconst imagePath = 'https://image.tmdb.org/t/p/w500';\nconst defaultPath = posterPath;\n\nconst getPosterPath = urlPart => {\n  if (urlPart) {\n    return `${imagePath}${urlPart}`;\n  }\n  return defaultPath;\n};\n\nexport default getPosterPath;\n","const getReleaseYear = data => data.split('-')[0];\n\nexport default getReleaseYear;\n","const getPopularityFormat = data => Math.floor(data);\n\nexport default getPopularityFormat;\n","const getGenresByName = data => data.map(genre => genre.name).join(', ');\n\nexport default getGenresByName;\n","const getVoteAverageFormat = data => data.toFixed(1);\n\nexport default getVoteAverageFormat;\n","import profilePath from '../images/avatar.jpg';\nconst imagePath = 'https://image.tmdb.org/t/p/w500';\nconst defaultPath = profilePath;\n\nconst getProfilePath = urlPart => {\n  if (urlPart) {\n    return `${imagePath}${urlPart}`;\n  }\n  return defaultPath;\n};\n\nexport default getProfilePath;\n","import getGenresById from './getGenresById';\nimport getPosterPath from './getPosterPath';\nimport getReleaseYear from './getReleaseYear';\nimport getPopularityFormat from './getPopularityFormat';\nimport getGenresByName from './getGenresByName';\nimport getVoteAverageFormat from './getVoteAverageFormat';\nimport getProfilePath from './getProfilePath';\n\nconst dataFilter = data => {\n  const dataFiltered = data.results.map(result => {\n    console.log(result.genre_ids);\n    return {\n      adult: result.adult,\n      genre_ids: getGenresById(result.genre_ids),\n      id: result.id,\n      poster_path: getPosterPath(result.poster_path),\n      release_date: getReleaseYear(result.release_date),\n      title: result.title,\n      vote_average: getVoteAverageFormat(result.vote_average),\n    };\n  });\n\n  const dataFilteredResponse = {\n    page: data.page,\n    results: dataFiltered,\n    total_pages: data.total_pages,\n  };\n  return dataFilteredResponse;\n};\n\nconst dataDetailsFilter = data => {\n  return {\n    budget: data.budget,\n    genres: getGenresByName(data.genres),\n    original_title: data.original_title,\n    overview: data.overview,\n    popularity: getPopularityFormat(data.popularity),\n    poster_path: getPosterPath(data.poster_path),\n    release_date: getReleaseYear(data.release_date),\n    title: data.title.toUpperCase(),\n    vote_average: getVoteAverageFormat(data.vote_average),\n    vote_count: data.vote_count,\n  };\n};\n\nconst dataCastFilter = ({ cast }) => {\n  const dataFiltered = cast.map(actor => {\n    return {\n      id: actor.id,\n      profile_path: getProfilePath(actor.profile_path),\n      name: actor.name,\n      character: actor.character,\n    };\n  });\n  return dataFiltered;\n};\n\nconst filteredAPIs = { dataFilter, dataDetailsFilter, dataCastFilter };\n\nexport default filteredAPIs;\n","import axios from 'axios';\nimport filteredAPIs from 'utils/dataFiltered';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '4efc7dd075300afeff5dc61a2436592d';\n\nconst getTrending = async ({ signal }) => {\n  const { data } = await axios.get(`trending/movie/day?api_key=${API_KEY}`, {\n    signal: signal,\n  });\n\n  if (data.results.length === 0) {\n    throw new Error();\n  }\n\n  const dataFilter = filteredAPIs.dataFilter(data);\n  return dataFilter;\n};\n\nconst getSearchMovie = async (searchName, page) => {\n  const { data } = await axios.get(\n    `search/movie?api_key=${API_KEY}&query=${searchName}&page=${page}&include_adult=false`\n  );\n\n  if (data.results.length === 0) {\n    throw new Error();\n  }\n\n  const dataFilter = filteredAPIs.dataFilter(data);\n  return dataFilter;\n};\n\nconst getMovieDetails = async ({ movieId, signal }) => {\n  const { data } = await axios.get(\n    `movie/${movieId}?api_key=${API_KEY}&language=en-US`,\n    { signal: signal }\n  );\n\n  if (data.length === 0) {\n    throw new Error();\n  }\n\n  const dataFilter = filteredAPIs.dataDetailsFilter(data);\n  return dataFilter;\n};\n\nconst getMovieCredits = async ({ movieId, signal }) => {\n  const { data } = await axios.get(\n    `movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`,\n    { signal: signal }\n  );\n  console.log(data);\n  if (data.length === 0) {\n    throw new Error();\n  }\n\n  const dataFilter = filteredAPIs.dataCastFilter(data);\n  console.log(dataFilter);\n  return dataFilter;\n};\n\nconst getMovieReviews = async ({ movieId, signal }) => {\n  const data = await axios.get(\n    `movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`,\n    { signal: signal }\n  );\n\n  if (data.length === 0) {\n    throw new Error();\n  }\n\n  return data;\n};\n\nconst APIs = {\n  getTrending,\n  getSearchMovie,\n  getMovieDetails,\n  getMovieCredits,\n  getMovieReviews,\n};\n\nexport default APIs;\n","import PropTypes from 'prop-types';\n\nconst CastCard = ({ actor }) => {\n  const { profile_path, name, character } = actor;\n  //   const location = useLocation();\n  // console.log(actor);\n  return (\n    <li>\n      <img src={profile_path} alt={name} />\n      <h2>{name}</h2>\n      <p>{character}</p>\n    </li>\n  );\n};\n\nCastCard.propTypes = {\n  actor: PropTypes.shape({\n    profile_path: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    character: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nexport default CastCard;\n","import PropTypes from 'prop-types';\nimport CastCard from 'components/CastCard/CastCard';\n\nconst CastList = ({ actors }) => {\n  const cast = actors;\n  if (!cast) return;\n\n  console.log(cast);\n  return (\n    <>\n      {cast.length > 0 ? (\n        <>\n          <ul>\n            {cast &&\n              cast.map(actor => <CastCard key={actor.id} actor={actor} />)}\n          </ul>\n        </>\n      ) : (\n        <p>We don't have cast for this movie </p>\n      )}\n    </>\n  );\n};\n\nCastList.propTypes = {\n  actors: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      actor: PropTypes.object,\n    }).isRequired\n  ),\n};\n\nexport default CastList;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Toaster, toast } from 'react-hot-toast';\nimport axios from 'axios';\nimport APIs from 'components/ApiService/ApiService';\nimport Loader from 'components/Loader/Loader';\nimport CastList from 'components/CastList/CastList';\n\nconst Cast = () => {\n  const [actors, setActors] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    if (!movieId) return;\n    const controller = new AbortController();\n    const FetchMovieCredits = async () => {\n      setLoading(true);\n      setError(null);\n      try {\n        const data = await APIs.getMovieCredits({\n          movieId: movieId,\n          signal: controller.signal,\n        });\n        console.log(data);\n        setActors(data);\n      } catch (error) {\n        if (axios.isCancel(error)) return;\n        setError(error.message);\n        // setError('Щось пішло не так... Спробуйте ще раз!');\n      } finally {\n        setLoading(false);\n      }\n    };\n    FetchMovieCredits();\n    // console.log(movie);\n    return () => {\n      controller.abort();\n    };\n  }, [movieId]);\n\n  useEffect(() => {\n    if (!error) return;\n\n    toast.error(error);\n  }, [error]);\n\n  return (\n    <>\n      <CastList actors={actors} />\n      {loading && <Loader />}\n      <Toaster position=\"top-right\" />\n    </>\n  );\n};\n\nexport default Cast;\n"],"names":["id","name","data","map","element","genreTable","el","join","defaultPath","posterPath","urlPart","split","Math","floor","genre","toFixed","profilePath","filteredAPIs","dataFilter","dataFiltered","results","result","console","log","genre_ids","adult","getGenresById","poster_path","getPosterPath","release_date","getReleaseYear","title","vote_average","getVoteAverageFormat","page","total_pages","dataDetailsFilter","budget","genres","getGenresByName","original_title","overview","popularity","getPopularityFormat","toUpperCase","vote_count","dataCastFilter","cast","actor","profile_path","getProfilePath","character","axios","API_KEY","getTrending","signal","length","Error","getSearchMovie","searchName","getMovieDetails","movieId","getMovieCredits","getMovieReviews","src","alt","actors","useState","setActors","loading","setLoading","error","setError","useParams","useEffect","controller","AbortController","FetchMovieCredits","APIs","message","abort","toast","Loader","position"],"sourceRoot":""}