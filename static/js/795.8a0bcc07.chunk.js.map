{"version":3,"file":"static/js/795.8a0bcc07.chunk.js","mappings":"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","sources":["utils/genreTable.js","utils/getGenresById.js","utils/getPosterPath.js","utils/getReleaseYear.js","utils/getPopularityFormat.js","utils/getGenresByName.js","utils/getVoteAverageFormat.js","utils/getProfilePath.js","utils/dataFiltered.js","components/ApiService/ApiService.jsx","components/MovieCard/MovieCard.styled.js","components/MovieCard/MovieCard.jsx","components/MoviesList/MoviesList.styled.js","components/MoviesList/MoviesList.jsx","pages/HomePage/HomePage.styled.js","pages/HomePage/HomePage.js"],"sourcesContent":["const genreTable = [\n  {\n    id: 28,\n    name: 'Action',\n  },\n  {\n    id: 12,\n    name: 'Adventure',\n  },\n  {\n    id: 16,\n    name: 'Animation',\n  },\n  {\n    id: 35,\n    name: 'Comedy',\n  },\n  {\n    id: 80,\n    name: 'Crime',\n  },\n  {\n    id: 99,\n    name: 'Documentary',\n  },\n  {\n    id: 18,\n    name: 'Drama',\n  },\n  {\n    id: 10751,\n    name: 'Family',\n  },\n  {\n    id: 14,\n    name: 'Fantasy',\n  },\n  {\n    id: 36,\n    name: 'History',\n  },\n  {\n    id: 27,\n    name: 'Horror',\n  },\n  {\n    id: 10402,\n    name: 'Music',\n  },\n  {\n    id: 9648,\n    name: 'Mystery',\n  },\n  {\n    id: 10749,\n    name: 'Romance',\n  },\n  {\n    id: 878,\n    name: 'Science Fiction',\n  },\n  {\n    id: 10770,\n    name: 'TV Movie',\n  },\n  {\n    id: 53,\n    name: 'Thriller',\n  },\n  {\n    id: 10752,\n    name: 'War',\n  },\n  {\n    id: 37,\n    name: 'Western',\n  },\n];\n\nexport default genreTable;\n","import genreTable from './genreTable';\n\nfunction getGenresById(data) {\n  return data\n    .map(element => {\n      return genreTable.find(el => el.id === element);\n    })\n    .map(el => el.name)\n    .join(', ');\n}\n\nexport default getGenresById;\n","import posterPath from '../images/poster.jpg';\nconst imagePath = 'https://image.tmdb.org/t/p/w500';\nconst defaultPath = posterPath;\n\nconst getPosterPath = urlPart => {\n  if (urlPart) {\n    return `${imagePath}${urlPart}`;\n  }\n  return defaultPath;\n};\n\nexport default getPosterPath;\n","const getReleaseYear = data => data.split('-')[0];\n\nexport default getReleaseYear;\n","const getPopularityFormat = data => Math.floor(data);\n\nexport default getPopularityFormat;\n","const getGenresByName = data => data.map(genre => genre.name).join(', ');\n\nexport default getGenresByName;\n","const getVoteAverageFormat = data => data.toFixed(1);\n\nexport default getVoteAverageFormat;\n","import profilePath from '../images/avatar.jpg';\nconst imagePath = 'https://image.tmdb.org/t/p/w500';\nconst defaultPath = profilePath;\n\nconst getProfilePath = urlPart => {\n  if (urlPart) {\n    return `${imagePath}${urlPart}`;\n  }\n  return defaultPath;\n};\n\nexport default getProfilePath;\n","import getGenresById from './getGenresById';\nimport getPosterPath from './getPosterPath';\nimport getReleaseYear from './getReleaseYear';\nimport getPopularityFormat from './getPopularityFormat';\nimport getGenresByName from './getGenresByName';\nimport getVoteAverageFormat from './getVoteAverageFormat';\nimport getProfilePath from './getProfilePath';\n\nconst dataFilter = data => {\n  const dataFiltered = data.results.map(result => {\n    return {\n      adult: result.adult,\n      genre_ids: getGenresById(result.genre_ids),\n      id: result.id,\n      poster_path: getPosterPath(result.poster_path),\n      release_date: getReleaseYear(result.release_date),\n      title: result.title.toUpperCase(),\n      vote_average: getVoteAverageFormat(result.vote_average),\n    };\n  });\n\n  const dataFilteredResponse = {\n    page: data.page,\n    results: dataFiltered,\n    total_pages: data.total_pages,\n  };\n  return dataFilteredResponse;\n};\n\nconst dataDetailsFilter = data => {\n  return {\n    budget: data.budget,\n    genres: getGenresByName(data.genres),\n    original_title: data.original_title,\n    overview: data.overview,\n    popularity: getPopularityFormat(data.popularity),\n    poster_path: getPosterPath(data.poster_path),\n    release_date: getReleaseYear(data.release_date),\n    title: data.title.toUpperCase(),\n    vote_average: getVoteAverageFormat(data.vote_average),\n    vote_count: data.vote_count,\n  };\n};\n\nconst dataCastFilter = ({ cast }) => {\n  const dataFiltered = cast.map(actor => {\n    return {\n      id: actor.id,\n      profile_path: getProfilePath(actor.profile_path),\n      name: actor.name,\n      character: actor.character,\n    };\n  });\n  return dataFiltered;\n};\n\nconst filteredAPIs = { dataFilter, dataDetailsFilter, dataCastFilter };\n\nexport default filteredAPIs;\n","import axios from 'axios';\nimport filteredAPIs from 'utils/dataFiltered';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '4efc7dd075300afeff5dc61a2436592d';\n\nconst getTrending = async ({ signal }) => {\n  const { data } = await axios.get(`trending/movie/day?api_key=${API_KEY}`, {\n    signal: signal,\n  });\n\n  if (data.results.length === 0) {\n    throw new Error();\n  }\n\n  const dataFilter = filteredAPIs.dataFilter(data);\n  return dataFilter;\n};\n\nconst getSearchMovie = async (searchName, page) => {\n  const { data } = await axios.get(\n    `search/movie?api_key=${API_KEY}&query=${searchName}&page=${page}&include_adult=false`\n  );\n\n  if (data.results.length === 0) {\n    throw new Error();\n  }\n\n  const dataFilter = filteredAPIs.dataFilter(data);\n  return dataFilter;\n};\n\nconst getMovieDetails = async ({ movieId, signal }) => {\n  const { data } = await axios.get(\n    `movie/${movieId}?api_key=${API_KEY}&language=en-US`,\n    { signal: signal }\n  );\n\n  if (data.length === 0) {\n    throw new Error();\n  }\n\n  const dataFilter = filteredAPIs.dataDetailsFilter(data);\n  return dataFilter;\n};\n\nconst getMovieCredits = async ({ movieId, signal }) => {\n  const { data } = await axios.get(\n    `movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`,\n    { signal: signal }\n  );\n\n  if (data.length === 0) {\n    throw new Error();\n  }\n\n  const dataFilter = filteredAPIs.dataCastFilter(data);\n  return dataFilter;\n};\n\nconst getMovieReviews = async ({ movieId, signal }) => {\n  const data = await axios.get(\n    `movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`,\n    { signal: signal }\n  );\n\n  if (data.length === 0) {\n    throw new Error();\n  }\n\n  return data;\n};\n\nconst APIs = {\n  getTrending,\n  getSearchMovie,\n  getMovieDetails,\n  getMovieCredits,\n  getMovieReviews,\n};\n\nexport default APIs;\n","import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\n\nexport const MovieCardItem = styled.li`\n  display: block;\n  border-bottom-left-radius: 4px;\n  border-bottom-right-radius: 4px;\n  box-shadow: 0px 1px 3px 0px #00000033, 0px 1px 1px 0px rgba(0, 0, 0, 0.14),\n    0px 2px 1px -1px rgba(0, 0, 0, 0.12);\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n`;\n\nexport const NavigationLink = styled(Link)`\n  text-decoration: none;\n`;\n\nexport const MovieCardImage = styled.img`\n  display: block;\n  height: 100%;\n  object-fit: cover;\n  margin-bottom: 8px;\n  border-radius: 5px;\n  height: 402px;\n  width: 280px;\n\n  @media screen and (min-width: 768px) {\n    height: 455px;\n    width: 336px;\n  }\n\n  @media screen and (min-width: 1280px) {\n    height: 574px;\n    width: 395px;\n    margin-bottom: 12px;\n  }\n`;\n\nexport const MovieCardContainer = styled.div`\n  display: block;\n  transition: transform 250ms linear;\n  overflow: hidden;\n  width: 280px;\n  text-decoration: none;\n\n  @media screen and (min-width: 768px) {\n    width: 336px;\n  }\n\n  @media screen and (min-width: 1280px) {\n    width: 395px;\n  }\n\n  &:hover,\n  &:focus {\n    transform: scale(1.03);\n  }\n`;\n\nexport const MovieCardTitle = styled.h3`\n  font-family: 'Roboto';\n  font-style: normal;\n  font-weight: 500;\n  font-size: 12px;\n  line-height: calc(16 / 12);\n  text-transform: uppercase;\n  color: ${p => p.theme.colors.black};\n  text-decoration: none;\n  margin: 0;\n\n  @media screen and (min-width: 1280px) {\n    font-size: 20px;\n    line-height: calc(24 / 20);\n  }\n`;\n\nexport const MovieCardContainerInfo = styled.div`\n  display: flex;\n  align-items: baseline;\n`;\n\nexport const MovieCardGenres = styled.p`\n  color: ${p => p.theme.colors.orange};\n  margin: 0;\n  font-size: 12px;\n  line-height: calc(16 / 12);\n  justify-content: center;\n  color: #ff6b08;\n  max-width: 290px;\n  margin: 0;\n\n  @media screen and (min-width: 1280px) {\n    font-size: 20px;\n    line-height: calc(24 / 20);\n    max-width: 345px;\n  }\n`;\n\nexport const MovieCardVote = styled.p`\n  font-family: 'Roboto';\n  font-style: normal;\n  font-weight: 500;\n  font-size: 12px;\n  line-height: calc(14 / 12);\n  border-radius: 5px;\n  color: #ffffff;\n  background-color: #ff6b08;\n  text-align: center;\n  width: 36px;\n  height: 16px;\n  margin-left: 8px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  @media screen and (min-width: 1280px) {\n    width: 40px;\n    height: 20px;\n  }\n`;\n","import { useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport routes from 'routes';\nimport {\n  MovieCardItem,\n  NavigationLink,\n  MovieCardImage,\n  MovieCardContainer,\n  MovieCardTitle,\n  MovieCardContainerInfo,\n  MovieCardGenres,\n  MovieCardVote,\n} from './MovieCard.styled';\n\nconst MovieCard = ({ movie }) => {\n  const { id, title, genre_ids, poster_path, release_date, vote_average } =\n    movie;\n  const location = useLocation();\n  return (\n    <MovieCardContainer>\n      <MovieCardItem>\n        {/* <Link to={`${routes.MOVIES}/${movie.id}`} state={{ from: location }}> */}\n        <NavigationLink\n          to={routes.STATIC_MOVIE_ID(id)}\n          state={{ from: location }}\n        >\n          <MovieCardImage src={poster_path} alt={title} />\n          <MovieCardTitle>{title}</MovieCardTitle>\n          <MovieCardContainerInfo>\n            <MovieCardGenres>\n              {genre_ids} | {release_date}\n            </MovieCardGenres>\n            <MovieCardVote>{vote_average}</MovieCardVote>\n          </MovieCardContainerInfo>\n        </NavigationLink>\n      </MovieCardItem>\n    </MovieCardContainer>\n  );\n};\n\nMovieCard.propTypes = {\n  movie: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    genre_ids: PropTypes.string.isRequired,\n    poster_path: PropTypes.string.isRequired,\n    release_date: PropTypes.string.isRequired,\n    vote_average: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nexport default MovieCard;\n","import styled from '@emotion/styled';\n\nexport const MoviesListStyled = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 15px;\n  justify-content: start;\n  margin-bottom: 20px;\n`;\n","import PropTypes from 'prop-types';\nimport MovieCard from 'components/MovieCard';\nimport { MoviesListStyled } from './MoviesList.styled';\n\nconst MoviesList = ({ movies }) => {\n  return (\n    <>\n      <MoviesListStyled>\n        {movies &&\n          movies.map(movie => <MovieCard key={movie.id} movie={movie} />)}\n      </MoviesListStyled>\n    </>\n  );\n};\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      movie: PropTypes.object,\n    }).isRequired\n  ).isRequired,\n};\n\nexport default MoviesList;\n","import styled from '@emotion/styled';\n\nexport const TrendingTitle = styled.h1`\n  text-align: center;\n`;\n","import { useEffect, useState } from 'react';\nimport { Toaster, toast } from 'react-hot-toast';\nimport axios from 'axios';\nimport Loader from 'components/Loader';\nimport APIs from 'components/ApiService';\nimport MoviesList from 'components/MoviesList';\nimport { TrendingTitle } from './HomePage.styled';\n\nconst HomePage = () => {\n  const [movies, setMovies] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const controller = new AbortController();\n    const FetchTrending = async () => {\n      setLoading(true);\n      setError(null);\n      try {\n        const data = await APIs.getTrending({ signal: controller.signal });\n        setMovies(prevState => [...prevState, ...data.results]);\n      } catch (error) {\n        if (axios.isCancel(error)) return;\n        setError(error.message);\n        // setError('Щось пішло не так... Спробуйте ще раз!');\n      } finally {\n        setLoading(false);\n      }\n    };\n    FetchTrending();\n    return () => {\n      controller.abort();\n    };\n  }, []);\n\n  useEffect(() => {\n    if (!error) return;\n    toast.error(error);\n  }, [error]);\n\n  return (\n    <div>\n      <TrendingTitle>Trending Movies</TrendingTitle>\n      <MoviesList movies={movies} />\n      {loading && <Loader />}\n      <Toaster position=\"top-right\" />\n    </div>\n  );\n};\n\nexport default HomePage;\n"],"names":["id","name","data","map","element","genreTable","el","join","defaultPath","posterPath","urlPart","split","Math","floor","genre","toFixed","profilePath","filteredAPIs","dataFilter","dataFiltered","results","result","adult","genre_ids","getGenresById","poster_path","getPosterPath","release_date","getReleaseYear","title","toUpperCase","vote_average","getVoteAverageFormat","page","total_pages","dataDetailsFilter","budget","genres","getGenresByName","original_title","overview","popularity","getPopularityFormat","vote_count","dataCastFilter","cast","actor","profile_path","getProfilePath","character","axios","API_KEY","getTrending","signal","length","Error","getSearchMovie","searchName","getMovieDetails","movieId","getMovieCredits","getMovieReviews","MovieCardItem","styled","NavigationLink","Link","MovieCardImage","MovieCardContainer","MovieCardTitle","p","theme","colors","black","MovieCardContainerInfo","MovieCardGenres","orange","MovieCardVote","movie","location","useLocation","to","routes","state","from","src","alt","MoviesListStyled","movies","TrendingTitle","useState","setMovies","loading","setLoading","error","setError","useEffect","controller","AbortController","FetchTrending","APIs","prevState","message","abort","toast","MoviesList","Loader","position"],"sourceRoot":""}